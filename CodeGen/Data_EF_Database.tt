
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#+
// <copyright>
// </copyright>

public class Data_EF_Database : BaseTemplate
{
	public override string TransformText()
	{
#>
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Linq;
using Contracts.Entities.Data;

// CAUTION - AUTOMATICALLY GENERATED
// These classes have been automatically generated from the core database. Use partial classes to create custom properties
// Code Generation Template developed by Ben Liebert, <#+ Write(System.DateTime.Now.ToString("d MMM yyyy")); #> 
namespace Data.EF.Database {

	/// <summary>
    /// Creates lists of the various data-bound entities, which can later be injected into test routines etc - bypassing any database dependencies
    /// </summary>
    public partial class CodeFirstModel
    {

		private void LoadTables(DbModelBuilder modelBuilder)
		{

<#+
	foreach(Table table in base.Tables)
	{
			if (table.Name == "_Staging") continue;
#>
			// <#+ WriteLine(table.Name); #>
			modelBuilder.Entity<<#+ Write(table.Name); #>>().HasKey(x => x.<#+ Write(table.Name); #>ID);
			modelBuilder.Entity<<#+ Write(table.Name); #>>().ToTable("<#+ Write(table.Name); #>");
<#+
			foreach (Column column in table.Columns)
			{
				PushIndent("\t\t\t");
				WriteLine("modelBuilder.Entity<" + table.Name + ">().Property(x => x." + column.Name + ");");
				PopIndent();
			}
#>
		
<#+

	}	// End ForEach
#>
		}
<#+
    foreach(Table table in base.Tables)
    {
		if (table.Name == "_Staging") continue;
#>

        public <#+ Write(table.Name); #> GetOrCreate<#+ Write(table.Name); #>(int? <#+ Write(table.Name); #>ID) {
            if (<#+ Write(table.Name); #>ID.GetValueOrDefault(0) > 0) return this.<#+ Write(table.Name); #>.FirstOrDefault(x => x.<#+ Write(table.Name); #>ID == <#+ Write(table.Name); #>ID);
            var newItem = new <#+ Write(table.Name); #>();
			this.<#+ Write(table.Name); #>.AddObject(newItem);
            return newItem;
        }

		public IObjectSet<Contracts.Entities.Data.<#+ Write(table.Name); #>> <#+ Write(table.Name); #>
        {
            get { 
				return Core.CreateObjectSet<<#+ Write(table.Name); #>>();
				// var set = Core.CreateObjectSet<<#+ Write(table.Name); #>>();
	            // set.MergeOption = MergeOption.NoTracking;
	            // return set;
			}
        }
	
<#+
	}	// End ForEach
#>
	}
}
<#+
            return this.GenerationEnvironment.ToString();
        }
    }
#>